// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Parkner.Api.Models;

namespace Parkner.Api.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20201216030630_Primera")]
    partial class Primera
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Parkner.Data.Entities.Cajon", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Disponible")
                        .HasColumnType("bit");

                    b.Property<string>("EstacionamientoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EstacionamientoId");

                    b.ToTable("Cajones");

                    b
                        .HasComment("Producto ofertado para el consumo del Cliente");

                    b.HasData(
                        new
                        {
                            Id = "331e78ae-2506-466f-ac8d-ff53d18e3e0c",
                            Disponible = true,
                            EstacionamientoId = "6478d74c-68e0-4e91-98a9-024040e302e2",
                            Nombre = "A"
                        },
                        new
                        {
                            Id = "4300d849-6fc0-4826-91d5-2822adcab7ad",
                            Disponible = true,
                            EstacionamientoId = "6478d74c-68e0-4e91-98a9-024040e302e2",
                            Nombre = "B"
                        },
                        new
                        {
                            Id = "2b1efc5c-9331-4229-8831-7a76ae73bbf5",
                            Disponible = true,
                            EstacionamientoId = "6478d74c-68e0-4e91-98a9-024040e302e2",
                            Nombre = "C"
                        },
                        new
                        {
                            Id = "b8483061-dc60-4586-85e8-58b01b4bed62",
                            Disponible = true,
                            EstacionamientoId = "6478d74c-68e0-4e91-98a9-024040e302e2",
                            Nombre = "D"
                        },
                        new
                        {
                            Id = "aaee52f6-b966-45e0-bc96-787777be8adf",
                            Disponible = true,
                            EstacionamientoId = "6478d74c-68e0-4e91-98a9-024040e302e2",
                            Nombre = "E"
                        });
                });

            modelBuilder.Entity("Parkner.Data.Entities.Cliente", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creacion")
                        .HasColumnType("DateTime2");

                    b.Property<bool>("Disponible")
                        .HasColumnType("bit");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");

                    b
                        .HasComment("Consumidores del servicio");

                    b.HasData(
                        new
                        {
                            Id = "3a0e3396-3557-4fe6-8532-bf72af2c8c95",
                            Apellido = "A",
                            Clave = "OGgFiKDvH7RfNOasdZLhfw==",
                            Correo = "a@c.co",
                            Creacion = new DateTime(2020, 12, 15, 21, 6, 30, 129, DateTimeKind.Local).AddTicks(7183),
                            Disponible = true,
                            Foto = "images/avatares/empleados/08b874f3-481e-44e9-9286-caeabb775860.png",
                            Nombre = "Cliente",
                            Rol = "Cliente"
                        },
                        new
                        {
                            Id = "5df10ce3-15ca-4164-abe0-20eea0393611",
                            Apellido = "B",
                            Clave = "OGgFiKDvH7RfNOasdZLhfw==",
                            Correo = "b@c.co",
                            Creacion = new DateTime(2020, 12, 15, 21, 6, 30, 129, DateTimeKind.Local).AddTicks(8064),
                            Disponible = true,
                            Foto = "images/avatares/empleados/08b874f3-481e-44e9-9286-caeabb775860.png",
                            Nombre = "Cliente",
                            Rol = "Cliente"
                        },
                        new
                        {
                            Id = "3b384e16-6076-496a-bc20-5f549e9543c7",
                            Apellido = "C",
                            Clave = "OGgFiKDvH7RfNOasdZLhfw==",
                            Correo = "c@c.co",
                            Creacion = new DateTime(2020, 12, 15, 21, 6, 30, 129, DateTimeKind.Local).AddTicks(8078),
                            Disponible = true,
                            Foto = "images/avatares/empleados/08b874f3-481e-44e9-9286-caeabb775860.png",
                            Nombre = "Cliente",
                            Rol = "Cliente"
                        },
                        new
                        {
                            Id = "eb5f0df7-23e3-413a-809d-b246b649a1c7",
                            Apellido = "D",
                            Clave = "OGgFiKDvH7RfNOasdZLhfw==",
                            Correo = "d@c.co",
                            Creacion = new DateTime(2020, 12, 15, 21, 6, 30, 129, DateTimeKind.Local).AddTicks(8081),
                            Disponible = true,
                            Foto = "images/avatares/empleados/08b874f3-481e-44e9-9286-caeabb775860.png",
                            Nombre = "Cliente",
                            Rol = "Cliente"
                        },
                        new
                        {
                            Id = "38f3d3a8-5b77-4e7f-9744-2e4dfbf75a93",
                            Apellido = "E",
                            Clave = "OGgFiKDvH7RfNOasdZLhfw==",
                            Correo = "e@c.co",
                            Creacion = new DateTime(2020, 12, 15, 21, 6, 30, 129, DateTimeKind.Local).AddTicks(8084),
                            Disponible = true,
                            Foto = "images/avatares/empleados/08b874f3-481e-44e9-9286-caeabb775860.png",
                            Nombre = "Cliente",
                            Rol = "Cliente"
                        });
                });

            modelBuilder.Entity("Parkner.Data.Entities.Direccion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Colonia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntreCalles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstacionamientoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Latitud")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitud")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Municipio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EstacionamientoId")
                        .IsUnique()
                        .HasFilter("[EstacionamientoId] IS NOT NULL");

                    b.ToTable("Direcciones");

                    b
                        .HasComment("Auxiliar de Estacionamientos");

                    b.HasData(
                        new
                        {
                            Id = "ad222b8b-ea21-4fe7-ac01-d3e9f7f325fe",
                            Calle = "San Cuilmas",
                            CodigoPostal = "28001",
                            Colonia = "San Pancho",
                            EntreCalles = "San Pedro y San Pablo",
                            EstacionamientoId = "6478d74c-68e0-4e91-98a9-024040e302e2",
                            Latitud = "19.239777",
                            Longitud = "-103.729653",
                            Municipio = "Colima",
                            Numero = "1A"
                        });
                });

            modelBuilder.Entity("Parkner.Data.Entities.Empleado", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creacion")
                        .HasColumnType("DateTime2");

                    b.Property<bool>("Disponible")
                        .HasColumnType("bit");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Empleados");

                    b
                        .HasComment("Recepcionistas del servicio/Trabajadores de los Estacionamientos");

                    b.HasData(
                        new
                        {
                            Id = "3a0e3396-3557-4fe6-8532-bf72af2c8c95",
                            Apellido = "A",
                            Clave = "OGgFiKDvH7RfNOasdZLhfw==",
                            Correo = "a@e.co",
                            Creacion = new DateTime(2020, 12, 15, 21, 6, 30, 127, DateTimeKind.Local).AddTicks(2115),
                            Disponible = true,
                            Foto = "images/avatares/empleados/08b874f3-481e-44e9-9286-caeabb775860.png",
                            Nombre = "Empleado",
                            Rol = "Empleado"
                        },
                        new
                        {
                            Id = "5df10ce3-15ca-4164-abe0-20eea0393611",
                            Apellido = "B",
                            Clave = "OGgFiKDvH7RfNOasdZLhfw==",
                            Correo = "b@e.co",
                            Creacion = new DateTime(2020, 12, 15, 21, 6, 30, 127, DateTimeKind.Local).AddTicks(3174),
                            Disponible = true,
                            Foto = "images/avatares/empleados/08b874f3-481e-44e9-9286-caeabb775860.png",
                            Nombre = "Empleado",
                            Rol = "Empleado"
                        },
                        new
                        {
                            Id = "3b384e16-6076-496a-bc20-5f549e9543c7",
                            Apellido = "C",
                            Clave = "OGgFiKDvH7RfNOasdZLhfw==",
                            Correo = "c@e.co",
                            Creacion = new DateTime(2020, 12, 15, 21, 6, 30, 127, DateTimeKind.Local).AddTicks(3190),
                            Disponible = true,
                            Foto = "images/avatares/empleados/08b874f3-481e-44e9-9286-caeabb775860.png",
                            Nombre = "Empleado",
                            Rol = "Empleado"
                        },
                        new
                        {
                            Id = "eb5f0df7-23e3-413a-809d-b246b649a1c7",
                            Apellido = "D",
                            Clave = "OGgFiKDvH7RfNOasdZLhfw==",
                            Correo = "d@e.co",
                            Creacion = new DateTime(2020, 12, 15, 21, 6, 30, 127, DateTimeKind.Local).AddTicks(3194),
                            Disponible = true,
                            Foto = "images/avatares/empleados/08b874f3-481e-44e9-9286-caeabb775860.png",
                            Nombre = "Empleado",
                            Rol = "Empleado"
                        },
                        new
                        {
                            Id = "38f3d3a8-5b77-4e7f-9744-2e4dfbf75a93",
                            Apellido = "E",
                            Clave = "OGgFiKDvH7RfNOasdZLhfw==",
                            Correo = "e@e.co",
                            Creacion = new DateTime(2020, 12, 15, 21, 6, 30, 127, DateTimeKind.Local).AddTicks(3197),
                            Disponible = true,
                            Foto = "images/avatares/empleados/08b874f3-481e-44e9-9286-caeabb775860.png",
                            Nombre = "Empleado",
                            Rol = "Empleado"
                        });
                });

            modelBuilder.Entity("Parkner.Data.Entities.Estacionamiento", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Calificacion")
                        .HasColumnType("Decimal(5,2)");

                    b.Property<bool>("Concurrido")
                        .HasColumnType("bit");

                    b.Property<decimal>("Costo")
                        .HasColumnType("Decimal(10,2)");

                    b.Property<DateTime>("Creacion")
                        .HasColumnType("DateTime2");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disponible")
                        .HasColumnType("bit");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsableId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResponsableId");

                    b.ToTable("Estacionamientos");

                    b
                        .HasComment("Activos del proveedor del servicio");

                    b.HasData(
                        new
                        {
                            Id = "6478d74c-68e0-4e91-98a9-024040e302e2",
                            Concurrido = false,
                            Costo = 5m,
                            Creacion = new DateTime(2020, 12, 15, 21, 6, 30, 128, DateTimeKind.Local).AddTicks(3811),
                            Descripcion = "Estacionamiento en terreno particular, junto a la plaza principal",
                            Disponible = true,
                            Foto = "images/avatares/empleados/08b874f3-481e-44e9-9286-caeabb775860.png",
                            Nombre = "San Pancho",
                            ResponsableId = "ee9646ef-62c7-4649-b1e4-2ffe8c71abf4",
                            Tipo = "Terreno"
                        });
                });

            modelBuilder.Entity("Parkner.Data.Entities.EstacionamientoEmpleado", b =>
                {
                    b.Property<string>("EmpleadoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EstacionamientoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Fecha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("EmpleadoId", "EstacionamientoId");

                    b.HasIndex("EstacionamientoId");

                    b.ToTable("EstacionamientosEmpleados");

                    b
                        .HasComment("Empleados del Estacionamientos/Estacionamientos del empleado");

                    b.HasData(
                        new
                        {
                            EmpleadoId = "3a0e3396-3557-4fe6-8532-bf72af2c8c95",
                            EstacionamientoId = "6478d74c-68e0-4e91-98a9-024040e302e2",
                            Fecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmpleadoId = "5df10ce3-15ca-4164-abe0-20eea0393611",
                            EstacionamientoId = "6478d74c-68e0-4e91-98a9-024040e302e2",
                            Fecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmpleadoId = "3b384e16-6076-496a-bc20-5f549e9543c7",
                            EstacionamientoId = "6478d74c-68e0-4e91-98a9-024040e302e2",
                            Fecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmpleadoId = "eb5f0df7-23e3-413a-809d-b246b649a1c7",
                            EstacionamientoId = "6478d74c-68e0-4e91-98a9-024040e302e2",
                            Fecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmpleadoId = "38f3d3a8-5b77-4e7f-9744-2e4dfbf75a93",
                            EstacionamientoId = "6478d74c-68e0-4e91-98a9-024040e302e2",
                            Fecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Parkner.Data.Entities.Ganancia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("Decimal(10,2)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("DateTime2");

                    b.Property<string>("ResponsableId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ResponsableId");

                    b.ToTable("Ganancias");

                    b
                        .HasComment("Beneficios para el prooveedor del servicio por la renta de sus activos");
                });

            modelBuilder.Entity("Parkner.Data.Entities.Horario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Dia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiaNumero")
                        .HasColumnType("int");

                    b.Property<string>("EstacionamientoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Fin")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.HasIndex("EstacionamientoId");

                    b.ToTable("Horarios");

                    b
                        .HasComment("Auxiliar de Estacionamientos");

                    b.HasData(
                        new
                        {
                            Id = "b0718cf7-1c7f-44d1-887e-79d64de33dcc",
                            Dia = "Lunes",
                            DiaNumero = 1,
                            EstacionamientoId = "6478d74c-68e0-4e91-98a9-024040e302e2",
                            Fin = new DateTime(2020, 1, 1, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Inicio = new DateTime(2020, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "cd1fb926-b2ea-45ad-a3a2-2ad1142f8e9a",
                            Dia = "Martes",
                            DiaNumero = 2,
                            EstacionamientoId = "6478d74c-68e0-4e91-98a9-024040e302e2",
                            Fin = new DateTime(2020, 1, 1, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Inicio = new DateTime(2020, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "dd83add4-bbe7-48e0-ab41-21759d940b54",
                            Dia = "Miércoles",
                            DiaNumero = 3,
                            EstacionamientoId = "6478d74c-68e0-4e91-98a9-024040e302e2",
                            Fin = new DateTime(2020, 1, 1, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Inicio = new DateTime(2020, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "bfc61cc9-3796-4d36-922a-3afdef7d9818",
                            Dia = "Jueves",
                            DiaNumero = 4,
                            EstacionamientoId = "6478d74c-68e0-4e91-98a9-024040e302e2",
                            Fin = new DateTime(2020, 1, 1, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Inicio = new DateTime(2020, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "f264ca4f-f127-41a9-b164-9425741ebdfe",
                            Dia = "Viernes",
                            DiaNumero = 5,
                            EstacionamientoId = "6478d74c-68e0-4e91-98a9-024040e302e2",
                            Fin = new DateTime(2020, 1, 1, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Inicio = new DateTime(2020, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "4db8abfa-920d-41b8-b973-24c987c55338",
                            Dia = "Sábados",
                            DiaNumero = 6,
                            EstacionamientoId = "6478d74c-68e0-4e91-98a9-024040e302e2",
                            Fin = new DateTime(2020, 1, 1, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Inicio = new DateTime(2020, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Parkner.Data.Entities.Reserva", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClienteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Cobrado")
                        .HasColumnType("Decimal(10,2)");

                    b.Property<bool>("Disponible")
                        .HasColumnType("bit");

                    b.Property<string>("EmpleadoFinalizadorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmpleadoInicializadorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EstacionamientoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Fin")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("DateTime2");

                    b.Property<int>("Tolerancia")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EmpleadoFinalizadorId");

                    b.HasIndex("EmpleadoInicializadorId");

                    b.HasIndex("EstacionamientoId");

                    b.ToTable("Reservas");

                    b
                        .HasComment("Consumo de Cajones en un Estacionamiento por los Clientes");
                });

            modelBuilder.Entity("Parkner.Data.Entities.Responsable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creacion")
                        .HasColumnType("DateTime2");

                    b.Property<bool>("Disponible")
                        .HasColumnType("bit");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Responsables");

                    b
                        .HasComment("Proveedores del servicio/Responsables de Estacionamientos y de sus Empleados");

                    b.HasData(
                        new
                        {
                            Id = "ee9646ef-62c7-4649-b1e4-2ffe8c71abf4",
                            Apellido = "A",
                            Clave = "OGgFiKDvH7RfNOasdZLhfw==",
                            Correo = "a@r.co",
                            Creacion = new DateTime(2020, 12, 15, 21, 6, 30, 128, DateTimeKind.Local).AddTicks(8369),
                            Disponible = true,
                            Foto = "images/avatares/empleados/08b874f3-481e-44e9-9286-caeabb775860.png",
                            Nombre = "Responsable",
                            Rol = "Responsable"
                        },
                        new
                        {
                            Id = "a9cd9063-4668-452c-807d-547aacbf1da7",
                            Apellido = "B",
                            Clave = "OGgFiKDvH7RfNOasdZLhfw==",
                            Correo = "b@r.co",
                            Creacion = new DateTime(2020, 12, 15, 21, 6, 30, 128, DateTimeKind.Local).AddTicks(9344),
                            Disponible = true,
                            Foto = "images/avatares/empleados/08b874f3-481e-44e9-9286-caeabb775860.png",
                            Nombre = "Responsable",
                            Rol = "Responsable"
                        },
                        new
                        {
                            Id = "504643bc-7c6c-43a5-bd83-2c82fa464981",
                            Apellido = "C",
                            Clave = "OGgFiKDvH7RfNOasdZLhfw==",
                            Correo = "c@r.co",
                            Creacion = new DateTime(2020, 12, 15, 21, 6, 30, 128, DateTimeKind.Local).AddTicks(9359),
                            Disponible = true,
                            Foto = "images/avatares/empleados/08b874f3-481e-44e9-9286-caeabb775860.png",
                            Nombre = "Responsable",
                            Rol = "Responsable"
                        },
                        new
                        {
                            Id = "95d60d39-6f6d-499c-9e21-77e7d6bb7040",
                            Apellido = "D",
                            Clave = "OGgFiKDvH7RfNOasdZLhfw==",
                            Correo = "d@r.co",
                            Creacion = new DateTime(2020, 12, 15, 21, 6, 30, 128, DateTimeKind.Local).AddTicks(9363),
                            Disponible = true,
                            Foto = "images/avatares/empleados/08b874f3-481e-44e9-9286-caeabb775860.png",
                            Nombre = "Responsable",
                            Rol = "Responsable"
                        },
                        new
                        {
                            Id = "049613e9-4b0a-4c69-bbda-f5d14f1d6fc3",
                            Apellido = "E",
                            Clave = "OGgFiKDvH7RfNOasdZLhfw==",
                            Correo = "e@r.co",
                            Creacion = new DateTime(2020, 12, 15, 21, 6, 30, 128, DateTimeKind.Local).AddTicks(9365),
                            Disponible = true,
                            Foto = "images/avatares/empleados/08b874f3-481e-44e9-9286-caeabb775860.png",
                            Nombre = "Responsable",
                            Rol = "Responsable"
                        },
                        new
                        {
                            Id = "243729f5-1863-4335-9cf8-51b41320321a",
                            Apellido = "F",
                            Clave = "OGgFiKDvH7RfNOasdZLhfw==",
                            Correo = "f@r.co",
                            Creacion = new DateTime(2020, 12, 15, 21, 6, 30, 128, DateTimeKind.Local).AddTicks(9377),
                            Disponible = true,
                            Foto = "images/avatares/empleados/08b874f3-481e-44e9-9286-caeabb775860.png",
                            Nombre = "Responsable",
                            Rol = "Responsable"
                        });
                });

            modelBuilder.Entity("Parkner.Data.Entities.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creacion")
                        .HasColumnType("DateTime2");

                    b.Property<bool>("Disponible")
                        .HasColumnType("bit");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b
                        .HasComment("Administradores del servicio");

                    b.HasData(
                        new
                        {
                            Id = "21a173bb-3116-4f35-a95f-35b6be172bfb",
                            Apellido = "General",
                            Clave = "OGgFiKDvH7RfNOasdZLhfw==",
                            Correo = "a@p.co",
                            Creacion = new DateTime(2020, 12, 15, 21, 6, 30, 83, DateTimeKind.Local).AddTicks(8485),
                            Disponible = true,
                            Foto = "images/avatares/empleados/08b874f3-481e-44e9-9286-caeabb775860.png",
                            Nombre = "Administrador",
                            Rol = "Administrador"
                        });
                });

            modelBuilder.Entity("Parkner.Data.Entities.Cajon", b =>
                {
                    b.HasOne("Parkner.Data.Entities.Estacionamiento", "Estacionamiento")
                        .WithMany("Cajones")
                        .HasForeignKey("EstacionamientoId")
                        .HasConstraintName("FK_Estacionamiento_Cajones")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estacionamiento");
                });

            modelBuilder.Entity("Parkner.Data.Entities.Direccion", b =>
                {
                    b.HasOne("Parkner.Data.Entities.Estacionamiento", "Estacionamiento")
                        .WithOne("Direccion")
                        .HasForeignKey("Parkner.Data.Entities.Direccion", "EstacionamientoId")
                        .HasConstraintName("FK_Direccion_Estacionamiento")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Estacionamiento");
                });

            modelBuilder.Entity("Parkner.Data.Entities.Estacionamiento", b =>
                {
                    b.HasOne("Parkner.Data.Entities.Responsable", "Responsable")
                        .WithMany("Estacionamientos")
                        .HasForeignKey("ResponsableId")
                        .HasConstraintName("FK_Responsable_Estacionamientos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Responsable");
                });

            modelBuilder.Entity("Parkner.Data.Entities.EstacionamientoEmpleado", b =>
                {
                    b.HasOne("Parkner.Data.Entities.Empleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parkner.Data.Entities.Estacionamiento", "Estacionamiento")
                        .WithMany()
                        .HasForeignKey("EstacionamientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("Estacionamiento");
                });

            modelBuilder.Entity("Parkner.Data.Entities.Ganancia", b =>
                {
                    b.HasOne("Parkner.Data.Entities.Responsable", "Responsable")
                        .WithMany("Ganancias")
                        .HasForeignKey("ResponsableId")
                        .HasConstraintName("FK_Responsable_Ganancias")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Responsable");
                });

            modelBuilder.Entity("Parkner.Data.Entities.Horario", b =>
                {
                    b.HasOne("Parkner.Data.Entities.Estacionamiento", "Estacionamiento")
                        .WithMany("Horarios")
                        .HasForeignKey("EstacionamientoId")
                        .HasConstraintName("FK_Estacionamiento_Horarios")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Estacionamiento");
                });

            modelBuilder.Entity("Parkner.Data.Entities.Reserva", b =>
                {
                    b.HasOne("Parkner.Data.Entities.Cliente", "Cliente")
                        .WithMany("Reservas")
                        .HasForeignKey("ClienteId")
                        .HasConstraintName("FK_Cliente_Reservas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parkner.Data.Entities.Empleado", "EmpleadoFinalizador")
                        .WithMany("ReservasFinalizadas")
                        .HasForeignKey("EmpleadoFinalizadorId")
                        .HasConstraintName("FK_EmpleadoFin_Reservas");

                    b.HasOne("Parkner.Data.Entities.Empleado", "EmpleadoInicializador")
                        .WithMany("ReservasIniciadas")
                        .HasForeignKey("EmpleadoInicializadorId")
                        .HasConstraintName("FK_EmpleadoInicio_Reservas");

                    b.HasOne("Parkner.Data.Entities.Estacionamiento", "Estacionamiento")
                        .WithMany("Reservas")
                        .HasForeignKey("EstacionamientoId")
                        .HasConstraintName("FK_Estacionamiento_Reservas")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("EmpleadoFinalizador");

                    b.Navigation("EmpleadoInicializador");

                    b.Navigation("Estacionamiento");
                });

            modelBuilder.Entity("Parkner.Data.Entities.Cliente", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("Parkner.Data.Entities.Empleado", b =>
                {
                    b.Navigation("ReservasFinalizadas");

                    b.Navigation("ReservasIniciadas");
                });

            modelBuilder.Entity("Parkner.Data.Entities.Estacionamiento", b =>
                {
                    b.Navigation("Cajones");

                    b.Navigation("Direccion");

                    b.Navigation("Horarios");

                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("Parkner.Data.Entities.Responsable", b =>
                {
                    b.Navigation("Estacionamientos");

                    b.Navigation("Ganancias");
                });
#pragma warning restore 612, 618
        }
    }
}
